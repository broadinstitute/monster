#!/usr/bin/env bash
set -euo pipefail

declare -ra HOMEBREW_CASKS=(
  # Community Edition
  docker
  # Installation manager for Jetbrains IDEs
  jetbrains-toolbox
  # Lightweight editor for when a full IDE is overkill
  visual-studio-code
  # Open, pre-built binaries of the reference implementation of the Java platform from OpenJDK
  adoptopenjdk
)

declare -ra HOMEBREW_FORMULAE=(
  # Version Control
  git
  git-lfs
  git-secrets
  # Build tools
  gradle
  sbt
  # Languages
  python
  python@2
  # Utilities
  grep
  htop
  jq
  parallel
  vault
  watch
  wget
  # Dev services
  liquibase
  postgresql@9.6
  # Bash helpers
  bash-completion@2
  bash-git-prompt
  docker-completion
  docker-compose-completion
  docker-machine-completion
  # Humor
  cowsay
  fortune
  sl
  thefuck
)

declare -ra HOMEBREW_SERVICES=(
  postgresql@9.6
)

declare -r GCLOUD_INSTALL_LOCATION=${HOME}/.google-cloud-sdk

function check_osx () {
  if [ "$(uname)" != Darwin ]; then
    1>&2 echo This script only works on OS X, sorry!
    exit 1
  fi
}

function install_devtools () {
  if ! xcode-select -p > /dev/null; then
    1>&2 echo Installing XCode tools...
    xcode-select --install
  fi
}

function install_homebrew () {
  if ! which brew > /dev/null; then
    1>&2 echo Installing Homebrew...
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  else
    brew update
  fi
}

function homebrew_install_or_upgrade () {
  local -r name=$1 is_cask=$2
  local -a brew_cmd

  if $(${is_cask}); then
    brew_cmd=(brew cask)
  else
    brew_cmd=(brew)
  fi

  # NOTE: This is *much* slower than using Homebrew's batch commands,
  # but brew doens't provide idempotent versions of 'install' or 'upgrade'
  # and it'd be way too compliated to do a batch list + diff into separate
  # install/upgrade/do-nothing lists.
  if HOMEBREW_NO_AUTO_UPDATE=1 ${brew_cmd[@]} ls --versions ${name} > /dev/null; then
    1>&2 echo Upgrading ${name} to latest version...
    HOMEBREW_NO_AUTO_UPDATE=1 ${brew_cmd[@]} upgrade ${name} || \
      1>&2 echo Nothing to 'do' 'for' ${name}
  else
    1>&2 echo Installing ${name}...
    HOMEBREW_NO_AUTO_UPDATE=1 ${brew_cmd[@]} install ${name}
  fi
}

function install_homebrew_casks () {
  1>&2 echo Installing Homebrew casks '('native OS X apps')'...
  for cask in ${HOMEBREW_CASKS[@]}; do
    homebrew_install_or_upgrade ${cask} true
  done
}

function install_homebrew_fomulae () {
  1>&2 echo Installing Homebrew fomulae...
  for formula in ${HOMEBREW_FORMULAE[@]}; do
    homebrew_install_or_upgrade ${formula} false
  done
}

function restart_homebrew_services () {
  1>&2 echo '('re')'Starting Homebrew-based services...
  for service in ${HOMEBREW_SERVICES[@]}; do
    brew services restart ${service}
  done
}

function install_gcloud_sdk () {
  if ! which gcloud > /dev/null; then
    1>&2 echo Installing Google Cloud SDK to ${GCLOUD_INSTALL_LOCATION}...
    mkdir -p ${GCLOUD_INSTALL_LOCATION}
    curl -sL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-253.0.0-darwin-x86_64.tar.gz | \
      tar xzf - --directory ${GCLOUD_INSTALL_LOCATION} && \
      ${GCLOUD_INSTALL_LOCATION}/google-cloud-sdk/install.sh
  else
    1>&2 echo Updating gcloud...
    gcloud components update
  fi

  local -r kubectl_path="$(which kubectl)"
  if [[ ! "$kubectl_path" =~ ^${GCLOUD_INSTALL_LOCATION}.* ]]; then
    1>&2 echo Installing gcloud-based k8s CLI...
    gcloud components install kubectl
  fi
}

function log_in () {
  # Removing existing docker configs - unable to run the login command until this is done
  1>&2 echo Removing existing docker configs...
  rm -rf ~/.docker
  1>&2 echo Logging into DockerHub...
  docker login

  if ! grep "$(whoami)" <(gcloud auth list 2>/dev/null) > /dev/null; then
    1>&2 echo Logging into Google...
    1>&2 echo When asked, choose "'broad-dsp-monster-dev'" as your default project
    1>&2 echo and "'us-central1-c'" as your default compute zone.
    gcloud init
  fi

  if ! grep gcloud ${HOME}/.docker/config.json > /dev/null; then
    1>&2 echo Connecting Google to Docker...
    gcloud auth configure-docker
  fi
}

function main () {
  check_osx
  install_devtools
  install_homebrew
  install_homebrew_casks
  install_homebrew_fomulae
  restart_homebrew_services
  install_gcloud_sdk
  log_in
}

main
